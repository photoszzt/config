set hidden            " Hide abandoned buffers, don't unload
set mouse=            " Disable mouse
set history=10000     " Long command history
set viminfo='500,"500 " Long mark history
set encoding=utf-8    " Use UTF-8 in Vim
set shortmess+=I      " Disable splash screen
set clipboard=unnamed " Use secondary clipboard (register '*') by default

set noswapfile       " Don't use swap files
set nobackup         " Don't use backup files
set nowritebackup    " with nobackup, together disable backup mode
set undofile         " Keep persistent undo
set undodir=/tmp     " Where to store undo files
set undolevels=10000 " Long undo history

set number               " Show number line
set confirm              " Ask to save changes
set wildmenu             " Better command completion
set wildignorecase       " Ignore case in command completion
set completeopt-=preview " Disable annoying popup window when autocompleting
set laststatus=2         " Always show statusline

set nowrap                 " Don't wrap lines
set whichwrap+=<,>,[,],h,l " Arrow keys and h/l wrap over lines
set backspace=2            " Backspace wraps over lines

set scrolloff=2       " Keep a few lines above/below cursor
set sidescrolloff=2   " Keep a few columns left/right of the cursor
set sidescroll=1      " Scroll horizontally by one column
set display+=lastline " Show as much as possible of the last line

set timeout timeoutlen=500  " Timeout between key combos
set ttimeout ttimeoutlen=50 " No idea what this does, but keep it

set ignorecase " Case insensitive search
set smartcase  " If an uppercase letter is the query, be case sensitive
set incsearch  " Highlight matches while typing query
set hlsearch   " Highlight all search matches

set expandtab          " Expand Tab key to spaces
set tabstop=4          " Number of spaces Tab key expands to
set smarttab           " Apply tabs in front of a line according to shiftwidth
set shiftwidth=4       " Number of spaces for each step of (auto)indent
set autoindent         " Automatically indent when starting a new line
set list               " Enable list mode
set listchars=tab:\ \  " Represent tab character as spaces

set stl=\                                 " Start with a space
set stl+=%1*%{!empty(@%)?@%:&ro?'':'~'}\  " Color 1: File name or ~ if empty
set stl+=%2*%{&mod?'++':'\ \ '}\ \        " Color 2: Add ++ if modified
set stl+=\ %3*\ %=%-7.(%l,%c%V%)          " Color 3: Row & column
set stl+=\                                " Extra space


" Fix weird quickfix statusline
autocmd BufNewFile,BufWinEnter quickfix
  \   let &l:stl = '%1* quickfix%3*%=%-14.(%l,%c%V%)%P '
  \ | nnoremap <silent><buffer> q :cclose<CR>

" Opening a new line after a comment doesn't start a new comment
autocmd BufNewFile,BufWinEnter *
  \ setl formatoptions-=o

" Convenience mapping for colon
noremap ; :

" Disable ex mode
nnoremap Q <nop>

" Extended yank/paste mappings
noremap Y y$
noremap <space>Y "+y$
noremap <space>y "+y
noremap <space>y "+y
noremap <silent> <space>p :set paste<CR>"+p:set nopaste<CR>
noremap <silent> <space>P :set paste<CR>"+P:set nopaste<CR>

" j/k moves up/down row by row, not line by line
noremap j gj
noremap k gk

" Fast jumping up/down
noremap J 5gj
noremap K 5gk

" Stay in visual mode when shifting indentation
xnoremap < <gv
xnoremap > >gv

" Switch to last used buffer
nnoremap <BS> <C-^>

" Move to next window
nnoremap <silent> <C-n> <C-w><C-w>

" Quick save
nnoremap <silent> <space>w :update<CR>
inoremap <silent> <C-s>    <C-O>:update<cr>
noremap  <silent> <C-s>    :update<cr>

" Redraw and clear highlighted search matches
noremap <silent> <C-l> :nohl<CR><C-l>

" Remove trailing whitespace from all lines in the buffer
command! TrimBuffer %s/\s\+$//

" Netrw settings
autocmd FileType netrw
  \ noremap <buffer><nowait> q :bd<CR>
let g:netrw_banner = 0
let g:netrw_browsex_viewer = 'xdg-open'

" Help settings
autocmd FileType help
  \ noremap <buffer><nowait> q :q<CR>

" Complete braces on <CR> in a sensible way
function! s:complete_braces()
  let line = getline('.')
  let col = col('.')
  if col < 1000 && col == len(line) + 1 && matchstr(line, '\%' . (col-1) . 'c.') == '{'
    return "}\<C-o>k\<C-o>A\<CR>"
  endif
  return ""
endfunction
inoremap <buffer><expr><CR> "\<CR>" . <SID>complete_braces()

" Start ranger and open the chosen file
function! s:ranger()
  exec "silent !ranger --choosefiles=/tmp/chosenfile --selectfile="
        \ . expand("%:p")
  if filereadable('/tmp/chosenfile')
    exec system('sed -ie "s/ /\\\ /g" /tmp/chosenfile')
    exec 'argadd ' . system('cat /tmp/chosenfile | tr "\\n" " "')
    exec 'edit ' . system('head -n1 /tmp/chosenfile')
    call system('rm -f /tmp/chosenfile')
  endif
  redraw!
endfunction
nnoremap <silent> - :call <SID>ranger()<CR>

" Show buffer outline
function! s:outline_format(lists)
  for list in a:lists
    let linenr = list[2][:len(list[2])-3]
    let line = getline(linenr)
    let idx = stridx(line, list[0])
    let len = len(list[0])
    let fg = synIDattr(synIDtrans(hlID("LineNr")), 'fg', 'cterm')
    let bg = synIDattr(synIDtrans(hlID("LineNr")), 'bg', 'cterm')
    let list[0] = ''
          \ . printf("\x1b[%sm %4d \x1b[m ", '38;5;'.fg.';48;5;'.bg, linenr)
          \ . line[:idx-1]
          \ . printf("\x1b[%sm%s\x1b[m", "34", line[idx:idx+len-1])
          \ . line[idx+len:]
    let list = list[:2]
  endfor
  return a:lists
endfunction
function! s:outline_source(tag_cmds)
  if !filereadable(expand('%'))
    throw 'Save the file first'
  endif
  for cmd in a:tag_cmds
    let lines = split(system(cmd), "\n")
    if !v:shell_error
      break
    endif
  endfor
  if v:shell_error
    throw get(lines, 0, 'Failed to extract tags')
  elseif empty(lines)
    throw 'No tags found'
  endif
  return map(s:outline_format(map(lines, 'split(v:val, "\t")')), 'join(v:val, "\t")')
endfunction
function! s:outline_sink(lines)
  if !empty(a:lines)
    let line = a:lines[0]
    execute split(line, "\t")[2]
  endif
endfunction
function! s:outline(...)
  let args = copy(a:000)
  let tag_cmds = [
    \ printf('ctags -f - --sort=no --excmd=number --language-force=%s %s 2>/dev/null', &filetype, expand('%:S')),
    \ printf('ctags -f - --sort=no --excmd=number %s 2>/dev/null', expand('%:S'))]
  try
    return fzf#run(fzf#wrap('outline', {
      \ 'source':  s:outline_source(tag_cmds),
      \ 'sink*':   function('s:outline_sink'),
      \ 'options': '--tiebreak=index --reverse +m -d "\t" --with-nth=1 -n 1 --ansi --extended --prompt "Outline> "'}))
  catch
    echohl WarningMsg
    echom v:exception
    echohl None
  endtry
endfunction
command! -bang Outline call s:outline()
nnoremap <silent> <space>o :Outline<CR>

" Refresh - useful when things go wrong
function! s:refresh()
  silent! call mkdir(fnamemodify(tempname(), ":p:h"), "", 0700)
  set nohlsearch
  redraw
  redrawstatus
endfunction
command! -bang Refresh call s:refresh()
nnoremap <silent> <space>r :Refresh<CR>

"gtags
let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/home/zhitingz/.globalrc'

" show tabs
set listchars=tab:!·,trail:·


syntax on                   " Enable syntax highlighting
set background=dark        " Assume dark background

" Statusline colors
hi def User1 ctermbg=18 ctermfg=20 cterm=bold
hi def User2 ctermbg=18 ctermfg=1 cterm=bold
hi def User3 ctermbg=18 ctermfg=20
hi StatusLine ctermbg=18 ctermfg=20
hi StatusLineNC ctermbg=18 ctermfg=8

" Completion popup colors
hi Pmenu ctermbg=19 ctermfg=7
hi PmenuSel ctermbg=17 ctermfg=15
hi PmenuSbar ctermbg=19 ctermfg=19
hi PmenuThumb ctermbg=8 ctermfg=8

" Search colors
hi Search ctermbg=0 ctermfg=15 cterm=bold
hi IncSearch ctermbg=9 ctermfg=15 cterm=bold

" Tab line colors
hi TabLineSel ctermbg=19 ctermfg=16 cterm=bold
hi TabLineFill ctermbg=18 ctermfg=20
hi TabLine ctermbg=18 ctermfg=20

" Other GUI colors
hi VertSplit ctermbg=0 ctermfg=19
hi CursorLine ctermbg=19
hi MatchParen ctermbg=0 ctermfg=15 cterm=bold,underline
hi WildMenu ctermbg=18 ctermfg=16 cterm=bold
